source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
setwd("~/Documents/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES")
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
# plot 4
ggplot(diamonds, aes(x=depth, y=..density..)) +
geom_density(aes(fill=cut), position="stack") +
xlim(50,75) +
theme(legend.position="none")
# plot 3: Stacked density plot:
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, position="fill")
# plot 2: Density plot with transparency (using the alpha argument):
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5 , alpha=0.2)
# plot 1: Density of price for each type of cut of the diamond:
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5)
# plot 2: Density plot with transparency (using the alpha argument):
ggplot(data=diamonds,aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5 , alpha=0.2)
all <- read.table("merge.data",header=T,sep=";")
View(all)
data(diamonds)
head(diamonds)
View(diamonds)
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
View(all)
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
all <- read.table("merge.data",header=T,sep=";")
ggplot(data=all,aes(x=size, group=algorithm, fill=algorithm)) +
geom_density(adjust=1.5 , alpha=0.2)
View(all)
ggplot(data=all,aes(x=Size, group=Algorithm, fill=Algorithm)) +
geom_density(adjust=1.5 , alpha=0.2)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
install.packages("latticeExtra")
p<-plot_ly(y=all$Time, x=all$Size , type="scatter", mode="markers+lines", group=all$Algorithm)
library(plotly)
install.packages("plotly")
library(plotly)
library(plotly)
# Let's do a first plot
p<-plot_ly(y=all$Time, x=all$Size , type="scatter", mode
# Let's do a first plot
p<-plot_ly(y=all$Time, x=all$Size , type="scatter", mode="markers+lines", group=all$Algorithm)
p<-plot_ly(y=all$Time, x=all$Size , type="scatter", mode="markers+lines", group=all$Algorithm)
p
ggplot2.lineplot(data=all, xName='Fat Tree Size', yName="Time (seconds)", groupName='Algorithm',legendPosition="top", linetype="solid",addPoint=TRUE, shape=19)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
library(ggplot2)
all <- read.table("merge.data",header=T,sep=";")
ggplot2.lineplot(data=all, xName='Fat Tree Size', yName="Time (seconds)", groupName='Algorithm',legendPosition="top", linetype="solid",addPoint=TRUE, shape=19)
scale_colour_fivethirtyeight()
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
p1 <- ggplot() + theme(plot.title=element_text(family="Atlas Grotesk Medium"), text=element_text(family="Atlas Grotesk Light")) + geom_line(aes(y = Time, x = Size, colour = Algorithm), size=1.5, data = all, stat="identity") + theme(legend.position="bottom", legend.direction="horizontal", legend.title = "Algorithm") + scale_x_continuous(breaks=seq(4,48,2)) + labs(x="Fat Tree Size", y="Time (seconds)") + ggtitle("Composition of Exports to China ($)")
p1
ggplot() + theme(plot.title=element_text(family="Atlas Grotesk Medium"), text=element_text(family="Atlas Grotesk Light")) + geom_line(aes(y = Time, x = Size, colour = Algorithm), size=1.5, data = all, stat="identity") + theme(legend.position="bottom", legend.direction="horizontal", legend.title = "Algorithm") + scale_x_continuous(breaks=seq(4,48,2)) + labs(x="Fat Tree Size", y="Time (seconds)") + ggtitle("Composition of Exports to China ($)")
ggplot() + geom_line(aes(y = Time, x = Size, colour = Algorithm), size=1.5, data = all, stat="identity") + theme(legend.position="bottom", legend.direction="horizontal", legend.title = "Algorithm") + scale_x_continuous(breaks=seq(4,48,2)) + labs(x="Fat Tree Size", y="Time (seconds)") + ggtitle("Composition of Exports to China ($)")
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
install.packages("RColorBrewer")
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
scale_colour_brewer(palette = "Spectral")
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
install.packages("wesanderson")
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
library(ggplot2)
library(wesanderson)
library(RColorBrewer)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
scale_color_manual(values = wes.palette(n=3, name="GrandBudapest"))
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
barplot(c(2,5,7), col=wes.palette(n=3, name="GrandBudapest"))
library(wesanderson)
barplot(c(2,5,7), col=wes.palette(n=3, name="GrandBudapest"))
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
scale_fill_manual(values = wes.palette(5, "Cavalcanti"))
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
ggplot(data=all, aes(x=Size,
y=Time,
group=Algorithm,
colour=Algorithm,
shape=Algorithm)
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 350)) +
scale_y_continuous(breaks = seq(0,500, by=50)) +
scale_x_continuous(breaks = seq(4,48, by=8))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)+
scale_fill_manual(values = wes.palette(5, "Cavalcanti"))
ggplot(data=all, aes(x=Size,
y=Time,
group=Algorithm,
colour=Algorithm,
shape=Algorithm)
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 350)) +
scale_y_continuous(breaks = seq(0,500, by=50)) +
scale_x_continuous(breaks = seq(4,48, by=8))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)+
scale_fill_manual(values = wes.palette(5, "Cavalcanti"))
ggplot(data=all, aes(x=Size,
y=Time,
group=Algorithm,
colour=Algorithm,
shape=Algorithm)
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 350)) +
scale_y_continuous(breaks = seq(0,500, by=50)) +
scale_x_continuous(breaks = seq(4,48, by=8))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)
scale_fill_manual
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
library(wesanderson)
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)+
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)+
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
scale_x_continuous(breaks = seq(4,48, by=8))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)+
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
scale_y_continuous(breaks = seq(0,500, by=50)) +
scale_x_continuous(breaks = seq(4,48, by=8))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)+
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
coord_cartesian(ylim = c(0, 350)) +
scale_y_continuous(breaks = seq(0,500, by=50)) +
scale_x_continuous(breaks = seq(4,48, by=8))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)+
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
ggplot(data=all, aes(x=Size,
y=Time,
group=Algorithm,
colour=Algorithm,
shape=Algorithm)
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 350)) +
scale_y_continuous(breaks = seq(0,500, by=50)) +
scale_x_continuous(breaks = seq(4,48, by=8))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)+
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
install.packages("wesanderson")
install.packages("wesanderson")
names(wes_palettes)
library("wesanderson")
names(wes_palettes)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
names(wes_palettes)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
library(ggplot2)
library(wesanderson)
library(RColorBrewer)
all <- read.table("merge.data",header=T,sep=";")
ggplot(data=all, aes(x=Size,
y=Time,
group=Algorithm,
colour=Algorithm,
shape=Algorithm)
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 550)) +
scale_y_continuous(breaks = seq(0,900, by=50)) +
scale_x_continuous(breaks = seq(4,48, by=8))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="bottom"
)+
scale_color_manual(values=wes_palette(n=5, name="Darjeeling1"))
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
source('/mnt/storage/Share/openstack_scheduler/gpuScheduler/MCL_AHP_TIMES/generateGraph.R', echo=TRUE)
