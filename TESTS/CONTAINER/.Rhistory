source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
View(all)
all <- read.table("times_mcl_ahp.txt",header=T,sep=";")
View(all)
library(ggplot2)
library(wesanderson)
library(RColorBrewer)
all <- read.table("times_mcl_ahp.txt",header=T,sep=";")
View(all)
View(all)
all <- read.table("times_mcl_ahp.txt",header=T,sep=";")
View(all)
all <- read.table("times_mcl_ahp.txt",header=T,sep=";")
View(all)
View(all)
all <- read.table("times_mcl_ahp.txt",header=T,sep=";")
View(all)
all <- read.table("times_mcl_ahp.txt",header=T,sep=";")
View(all)
all <- read.table("times_mcl_ahp.txt",header=T,sep=";")
View(all)
setwd("~/Documents/Share/openstack_scheduler/TESTS/CONTAINER")
all <- read.table("times_mcl_ahp.txt",header=T,sep=";")
View(all)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
View(all)
all
all$ahp
View(all)
all$Multicriteria.method
all[0]
all[1:2]
all[1:3]
all[1:4]
all[1:5]
all[1:3]
all[1:4]
all[1:4]
all[,1]=="ahp"
all[all[,1]=="ahp",]
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
all <- read.table("times_total.txt",header=T,sep=";")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
all <- read.table("times_total.txt",header=T,sep=";")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
all[all[,1]=="ahp",]
help(ggsave)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
ggplot(data=pl, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900)) +
scale_y_continuous(breaks = seq(0,900, by=100)) +
#scale_x_continuous(breaks = seq(4,48, by=4))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="bottom",
plot.title = element_text(color="black", size=16, face="bold.italic"),
)+
scale_color_manual(values=wes_palette(n=5, name="FantasticFox1"))+
labs(colour="Fat Tree Size", shape="Fat Tree Size", x="Number of Containers", y="Time (s)", title="Container clustering with pure MCL Method")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900)) +
scale_y_continuous(breaks = seq(0,900, by=100)) +
#scale_x_continuous(breaks = seq(4,48, by=4))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="bottom",
plot.title = element_text(color="black", size=16, face="bold.italic"),
)+
scale_color_manual(values=wes_palette(n=5, name="FantasticFox1"))+
labs(colour="Fat Tree Size", shape="Fat Tree Size", x="Number of Containers", y="Time (s)", title="Container clustering with pure MCL Method")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
View(all)
all <- read.table("times_total.txt",header=T,sep=";")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
View(all)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900))
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
all <- read.table("times_total.txt",header=T,sep=";")
all <- all[all[,1]=="ahp",]
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900)) +
scale_y_continuous(breaks = seq(0,900, by=100))
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900))
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900)) +
scale_y_continuous(breaks = seq(0,900, by=100))
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
setwd("~/Documents/Share/openstack_scheduler/TESTS/CONTAINER")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
pl <- read.table("times_ahpg.txt",header=T,sep=";")
View(pl)
all <- read.table("times_total.txt",header=T,sep=";")
all <- all[all[,1]=="ahpg",]
all <- read.table("times_total.txt",header=T,sep=";")
all <- all[all[,1]=="ahpg",]
pl <- read.table("times_ahpg.txt",header=T,sep=";")
all <- pl
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
View(all)
View(pl)
View(all)
View(pl)
all <- read.table("times_total.txt",header=T,sep=";")
all <- all[all[,1]=="ahpg",]
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3) +
#coord_cartesian(ylim = c(0, 900)) +
#scale_y_continuous(breaks = seq(0,900, by=100)) +
#scale_x_continuous(breaks = seq(4,48, by=4))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="bottom",
plot.title = element_text(color="black", size=16, face="bold.italic"),
)+
scale_color_manual(values=wes_palette(n=5, name="FantasticFox1"))+
labs(colour="Fat Tree Size", shape="Fat Tree Size", x="Number of Containers", y="Time (s)", title="Container clustering with pure MCL Method")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
all <- read.table("times_total.txt",header=T,sep=";")
all <- all[all[,1]=="ahpg",]
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900)) +
scale_y_continuous(breaks = seq(0,900, by=100)) +
scale_x_continuous(breaks = seq(4,48, by=4))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="bottom",
plot.title = element_text(color="black", size=16, face="bold.italic"),
)+
scale_color_manual(values=wes_palette(n=5, name="FantasticFox1"))+
labs(colour="Fat Tree Size", shape="Fat Tree Size", x="Number of Containers", y="Time (s)", title="Container clustering with pure MCL Method")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
View(all)
library(ggplot2)
library(wesanderson)
library(RColorBrewer)
all <- read.table("times_total.txt",header=T,sep=";")
all <- all[all[,1]=="ahpg",]
pl <- read.table("times_ahpg.txt",header=T,sep=";")
#all <- pl
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900)) +
scale_y_continuous(breaks = seq(0,900, by=100)) +
scale_x_continuous(breaks = seq(4,48, by=4))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="bottom",
plot.title = element_text(color="black", size=16, face="bold.italic"),
)+
scale_color_manual(values=wes_palette(n=5, name="FantasticFox1"))+
labs(colour="Fat Tree Size", shape="Fat Tree Size", x="Number of Containers", y="Time (s)", title="Container clustering with pure MCL Method")
all
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=Fat.Tree.Size,
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=Fat.Tree.Size,
colour=Fat.Tree.Size,
shape=Fat.Tree.Size)
)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=Fat.Tree.Size,
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
)
ggplot(data=all, aes(x=Number.of.containers,
y=Time,
group=factor(Fat.Tree.Size),
colour=factor(Fat.Tree.Size),
shape=factor(Fat.Tree.Size))
) +
geom_line(size=1)
cols <- c('character', 'integer', 'integer', rep('numeric', 10))
all <- read.table("times_total.txt",header=T,sep=";",colClasses = cols)
cols <- c('character', 'integer', 'integer', 'numeric')
all <- read.table("times_total.txt",header=T,sep=";",colClasses = cols)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
a <- c('a','b','c')
a
for aa in a
for(aa in a){}
print(aa)
}
aa
a
for(aa in a){print(aa)}
for(aa in a){print(aa+"TEST.pdf")}
a
aa
paste(a,"TEST.pdf")
paste(a,"TEST.pdf",sep="")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
help(ggsave)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
names <- c("ahp","ahpg","mcl_ahp","mcl","clustered ahp")
for(name in names){print(name)}
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
install.packages("keypress")
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
pg <- all[all[,1]==name,]
View(pg)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
legend<-"Container clustering with pure MCL Method"
legend
legend<-"Container clustering with "
legend
legend<-paste(legend,"mcl",sep=" ")
legend
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
pg <- all[all[,2]==size,]
#all <- pl
legend<-"Container clustering with fat tree size k="
legend<-paste(legend,size,sep="")
pl<-ggplot(data=pg, aes(x=Number.of.containers,
y=Time,
group=factor(Multicriteria.method),
colour=factor(Multicriteria.method),
shape=factor(Multicriteria.method))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900)) +
scale_y_continuous(breaks = seq(0,900, by=100)) +
#scale_x_continuous(breaks = seq(4,48, by=4))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="bottom",
plot.title = element_text(color="black", size=16, face="bold.italic"))+
scale_color_manual(values=wes_palette(n=5, name="FantasticFox1"))+
labs(colour="Fat Tree Size", shape="Multicriteria Method", x="Number of Containers", y="Time (s)", title=legend)
plot(pl)
sizes <- c(4,16,32,40)
sizes <- c(4,16,32,40)
for(size in sizes){
pg <- all[all[,2]==size,]
#all <- pl
legend<-"Container clustering with fat tree size k="
legend<-paste(legend,size,sep="")
pl<-ggplot(data=pg, aes(x=Number.of.containers,
y=Time,
group=factor(Multicriteria.method),
colour=factor(Multicriteria.method),
shape=factor(Multicriteria.method))
) +
geom_line(size=1) +
geom_point(size=3) +
coord_cartesian(ylim = c(0, 900)) +
scale_y_continuous(breaks = seq(0,900, by=100)) +
#scale_x_continuous(breaks = seq(4,48, by=4))+
theme_bw()+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="bottom",
plot.title = element_text(color="black", size=16, face="bold.italic"))+
scale_color_manual(values=wes_palette(n=5, name="FantasticFox1"))+
labs(colour="Fat Tree Size", shape="Multicriteria Method", x="Number of Containers", y="Time (s)", title=legend)
plot(pl)
ggsave(paste(name,".pdf",sep=""),device="pdf")
}
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
source('~/Documents/Share/openstack_scheduler/TESTS/CONTAINER/generateGraph.R', echo=TRUE)
